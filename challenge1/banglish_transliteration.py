# -*- coding: utf-8 -*-
"""Banglish Transliteration.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uNN3RZ9tqceDHL52rX2gCdfUdSdwwN6g
"""

!pip install datasets transformers

from datasets import load_dataset

dataset = load_dataset("SKNahin/bengali-transliteration-data")

dataset = dataset["train"].train_test_split(test_size=0.2)

dataset["train"][0]

from transformers import AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained("t5-small")

source_lang = "rm"
target_lang = "bn"
prefix = "Transliterate Romanized Bangla to Bangla: "

def preprocess_function(examples):
    inputs = [prefix + example for example in examples[source_lang]]
    targets = [example for example in examples[target_lang]]

    model_inputs = tokenizer(inputs, max_length=128, truncation=True)

    with tokenizer.as_target_tokenizer():
        labels = tokenizer(targets, max_length=128, truncation=True)

    model_inputs["labels"] = labels["input_ids"]
    return model_inputs

tokenized_dataset = dataset.map(preprocess_function, batched=True)

from transformers import AutoModelForSeq2SeqLM, Seq2SeqTrainingArguments, Seq2SeqTrainer

model = AutoModelForSeq2SeqLM.from_pretrained("t5-small")

from transformers import DataCollatorForSeq2Seq

data_collator = DataCollatorForSeq2Seq(tokenizer=tokenizer, model=model)

training_args = Seq2SeqTrainingArguments(
    output_dir="./results",
    evaluation_strategy="epoch",
    learning_rate=2e-5,
    per_device_train_batch_size=16,
    per_device_eval_batch_size=16,
    weight_decay=0.01,
    save_total_limit=3,
    num_train_epochs=1,
    fp16=True,
)

trainer = Seq2SeqTrainer(
    model=model,
    args=training_args,
    train_dataset=tokenized_dataset["train"],
    eval_dataset=tokenized_dataset["test"],
    tokenizer=tokenizer,
    data_collator=data_collator,
)

trainer.train()

import os
from datetime import datetime

# Create model directory
MODEL_DIR = "models"
TIMESTAMP = datetime.now().strftime("%Y%m%d_%H%M%S")
NEW_MODEL = os.path.join(MODEL_DIR, f"banglish-transliteration-t5-small-{TIMESTAMP}")

# Create directory if it doesn't exist
os.makedirs(MODEL_DIR, exist_ok=True)

try:
    # Save the model
    trainer.save_model(NEW_MODEL)
    
    # Save training arguments
    training_args.save_json(os.path.join(NEW_MODEL, "training_args.json"))
    
    print(f"Model successfully saved to {NEW_MODEL}")
except Exception as e:
    print(f"Error saving model: {str(e)}")

def transliterate_text(model, tokenizer, text, prefix="Transliterate Romanized Bangla to Bangla: "):
    input_text = prefix + text
    inputs = tokenizer.encode(input_text, return_tensors="pt", truncation=True)
    outputs = model.generate(inputs, max_length=128, num_beams=4)
    prediction = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return prediction

from transformers import AutoModelForSeq2SeqLM, AutoTokenizer

model_path = NEW_MODEL
model = AutoModelForSeq2SeqLM.from_pretrained(model_path)
tokenizer = AutoTokenizer.from_pretrained(model_path)

text = "ami test korechi code disi"  # Example Romanized Bangla input
output = transliterate_text(model, tokenizer, text)
print("Romanized Bangla:", text)
print("Transliterated Bangla:", output)